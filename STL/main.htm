<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="../подсветка/styles/default.min.css">
    <title>STL</title>
</head>
<body>
    <header class="header">
        <a href="file:///C:/Users/admin/Documents/%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%209%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA%20%D1%82%D0%B5%D0%BC/index.htm" class="return">Назад</a>
        <div class="topic">STL</div>
    </header>
    <div class="container">
        <section class="about_topic">
            <h1>Определение</h1>
            <p>STL (Standard Template Library) - набор согласованных обобщённых алгоритмов, контейнеров, средств доступа к их содержимому и различных вспомогательных функций в C++. STL - очень мощный инструмент, который облегчает написание кода. Чтобы не писать свои сортировки и т.д, можно использовать встроенные функции.</p>
            <img src="images/STL.png" alt="" class = "img" width="700">
            <h1>Vector</h1>
            <p>Vector - это встроенный динамический массив. В отличие от обычного статического массива, вектор может менять свой размер.</p>
            <pre>
                <code data-lang="cpp">
                    #include &lt;iostream&gt;
                    #include &lt;vector&gt; // находится в данной библиотеке

                    using namespace std;
                    
                    int main()
                    {
                        vector < int > arr(5) = {1,2,3,4,5}; // vector < тип данных > название (размер, чем заполнить(автоматически вектор заполнен 0))
                        arr.push_back(6); // Добавляет в конец 6
                        arr.pop_back(); // Удаляет элемент в конце
                        arr.empty(); // Возвращает true, если вектор пустой
                        arr.clear(); // Очищает вектор
                        arr.begin(); // Возвращает итератор на 1ый элемент
                        arr.end(); // Возвращает итератор на последний элемент
                    }
                </code>
            </pre>
            <p>У каждого контейнера STL есть итераторы.</p>
            <pre>
                <code data-lang="cpp">
                    #include &lt;iostream&gt;
                    #include &lt;vector&gt; // находится в данной библиотеке

                    using namespace std;
                    
                    int main()
                    {
                        vector< int > arr = {1,2};
                        vector<int>::iterator iter = v.begin();//итератор, который указывает на первый элемент вектора
                        auto iter = v.begin(); // то же самое. Проще?
                        *iter; // возвращает элемент, на который указывает итератор
                        iter++; //перемещает итератор на следующий элемент
                        iter--; // перемещает итератор на предыдущий элемент
                        iter==v.begin(); //сравнивнение двух итераторов

                        // С помощью итератора мы можем отсортировать вектор
                        sort(arr.begin(),arr.end()); // Сортировка по возрастанию
                        sort(arr.rbegin(),arr.rend()); // Сортировка по убыванию
                    }
                </code>
            </pre>
            <h1>Pair</h1>
            <pre>
                <code data-lang="cpp">
                    pair < type , type > p;
                </code>
            </pre>
            <p>Эта структура данных, как понятно из названия, хранит пару элементов, не обязательно одного типа</p>
            <pre>
                <code data-lang="cpp">
                    pair< int , string > p;

                    p.first = 1;
                    p.second = "apple";

                    p = make_pair(1, "apple");
                    p = {1, "apple"}; // то же самое, что и код выше

                    auto[a, b] = p; // a = p.first, b = p.second, работает на C++17
                </code>
            </pre>
            <h1>Tuple</h1>
            <p>Если pair только для 2 элементов, то tuple для нескольких.</p>
            <pre>
                <code data-lang="cpp">
                    tuple< int , int , string> t;

                    get< 2 >(t) = "apple"; // get< index >(tuple) позволяет обратиться к элементу tuple под номером index

                    cout << get< 2 >(t);

                    t = make_tuple(1, 2, "a");

                    t = {1, 2, "a"};

                    auto[a, b, s] = t;// декомпозиция tuple, аналогично декомпозиции pair
                </code>
            </pre>
            <h1>Set</h1>
            <p>Сет с английского множество. В нём хранятся неповторяющиеся элементы в отсортированном порядке. Почти все действия происходят за O(log(n)), где n - размер сета</p>
            <pre>
                <code data-lang="cpp">
                    set<int> s = {1, 2, 3}; // можно определить сет так

                        s = {}; // очистить сет
                        
                        int x = 0;
                        s.insert(2); // добавить в множество элемент 2
                        s.insert(x); // добавить в множество элемент x
                        
                        s.size(); // вернёт размер
                        
                        s.empty(); // вернёт true, если сет пустой, иначе false
                        
                        x = 2;
                        s.insert(x); // в сете будут элменты - 0, 2
                        auto iter = s.begin(); // возвращает итератор на 1 элмент (0)
                        
                        //    cout << iter; // получите ошибку, тк у итератора не определён вывод
                        
                        cout << (*iter) << endl; // выведет 0, тк (*iter) возвращает значеник, на которое указывает итератор
                        
                        iter++; // переместит итератор на следующий элемент
                        cout << (*iter) << endl; // выведет 2
                        
                        iter--; // переместит итератор на предыдущий элемент
                        cout << (*iter) << endl; // выведет 0
                        iter--; // получите ошибку, тк не существует итераторов до s.begin()
                        
                        iter = s.end(); // возвращает итератор на конец сета, ВНИМАНИЕ не на ПОСЛЕДНИЙ ЭЛЕМЕНТ сета, а на КОНЕЦ сета.
                        
                        for (iter = s.begin(); iter != s.end(); iter++) { // таким образом можем пробежаться по сету
                            cout << (*iter) << ' ';
                        }
                        cout << endl;
                        for (auto i : s) { // ещё один способ пробежаться по сету. Тут мы бежим не по итераторам, а по самим элементам
                            cout << i << ' ';
                        }
                        cout << endl;
                        for (auto iter = s.rbegin();
                             iter != s.rend(); iter++) { // таким образом можем пробежаться по сету в обратном порядке
                            cout << (*iter) << ' ';
                        }
                        cout << endl;
                        x = 2;
                        s.find(x); // возвращает итератор на элемента равный x, если такой есть, в другом случае возвращает s.end()
                        
                        s.erase(x); //удаляет элемент x, если такой существует
                        s.insert(x);
                        
                        iter = ++s.begin();
                        s.erase(iter); // удалить элемент, на который указывает iter, после удаления iter считается невалидным итератором.
                        
                        s.lower_bound(x); // возвращает итератор на первый элемент >= x, если такой существует, иначе возвращает s.end()
                        
                        s.upper_bound(x); // // возвращает итератор на первый элемент > x, если такой существует, иначе возвращает s.end()
                        
                        s.erase(s.upper_bound(x)); // удаляет первый элемент больший x, если такой существует, иначе вы получите ошибку, тк вы попытаетесь удалить s.end().
                        
                        s.count(x); // возвращает количество элементов с заданным значением.
                </code>
            </pre>
            <h1>Multiset</h1>
            <p>Главное отличик multiset от set - это то, что в нём могут находится повторяющиеся элементы. Multiset имеет все те же методы, что и сет.</p>
            <pre>
                <code data-lang="cpp">
                    multiset<int> s = {1, 2, 2, 3}; 

                    for(auto i : s){
                        cout << i << ' '; // что выведет программа?
                    }
                    
                    s.erase(2) // удалить все элементы равные 2, если они есть
                    s.erase(s.find(2)); // удалить первый элемент равный 2, если он есть, иначе вы получите ошибку        
                    s.count(2); // вернёт кол-во элементов равных 2
                </code>
            </pre>
            <h1>Queue</h1>
            <p>С английского очередь. Работает по принципу FIFO (First in First out - первый зашёл, первый вышел)</p>
            <pre>
                <code data-lang="cpp">
                    queue<int> q;

                        q.push(1); // добавляет в очередь 1
                        q.push(2);
                        
                        q.front(); // возвращает первый элемент в очереди
                        q.back(); // возвращает последний элемент в очереди
                        
                        q.pop(); // удалить первый элемент в очереди
                        
                        q.size();
                        q.empty();
                </code>
            </pre>
            <h1>Stack</h1>
            <p>Работает по принципу FILO (First in Last out - первый зашёл, последний вышел)</p>
            <pre>
                <code data-lang="cpp">
                    stack<int> s;

                    s.push(1); // добавляет в стэк 1
                    s.push(2);
                    
                    s.top(); // возвращает верхний элемент stack
                    
                    s.pop(); // удалить верхний элемент                        
                    s.size();
                    s.empty();
                </code>
            </pre>
            <h1>Deque</h1>
            <p>Совмещает queue и stack.</p>
            <pre>
                <code data-lang="cpp">
                    deque<int> d;

                    d.push_back(3); // добавить в конец 3
                    d.push_front(1); // добавить в начало 1
                    
                    d.front(); // возвращает первый элемент
                    d.back();// возвращает последний элемент                        
                    d.pop_back(); // удаляет последний элемент
                    d.push_back(3);
                    
                    d.pop_front(); // удаляет первый элемент
                    d.push_back(1);
                    for(auto i : d){ // таким образом можно пробежаться по deque
                        cout << i << ' ';
                    }  
                </code>
            </pre>
            <h1>Map</h1>
            <pre>
                <code data-lang="cpp">
                    map<int, int> mp;// в мапе хранятся пары - ключ -> значение
                    // mp[x];  вернёт значение по ключу x, если оно есть, иначе вернёт стандартное значение типа значение

                    mp[2] = 3;
                    mp[10000000] = -1;
                    cout << mp[3] << endl; // выведет 0

                    for (auto i : mp) { // i - пара ключ значение
                        cout << i.first << ' ' << i.second << endl;
                    }

                    for (auto[key, value] : mp) {
                        cout << key << ' ' << value << endl;
                    }

                    mp.erase(3); // удалит из мапа элемент с ключом 3
                </code>
            </pre>
            <h1>Некторые полезные функции</h1>
            <pre>
                <code data-lang="cpp">
                    vector<int> v;
                    int ar[n];
                    
                    sort(v.begin(), v.end());
                    sort(ar, ar + n);
                    
                    reverse(ar, ar + n);
                    reverse(v.begin(), v.end());
                        
                    fill(ar, ar + n, 3);
                        
                </code>
            </pre>
        </section>
    </div>
    <script src="../подсветка/highlight.min.js"></script>
    <script>hljs.highlightAll();</script>
</body>
</html>