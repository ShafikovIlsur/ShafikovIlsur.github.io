<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="../подсветка/styles/default.min.css">
    <title>Массивы</title>
</head>
<body>
    <header class="header">
        <a href="../index.htm" class="return">Назад</a>
        <div class="topic">Массивы</div>
    </header>
    <div class="container">
        <section class="about_topic">
            <h1>Определение и применение</h1>
            <p><bold>Массив</bold> - это область памяти, где могут последовательно храниться несколько значений одного типа данных. Обычно массив используют для хранения списка чего-либо. Например, вам нужно записать оценки учеников в школе. Создавть отдельную переменную для ученика - это нерацианально. Для этого используют массивы.</p>
            <h1>Синтаксис</h1>
            <p>Чтобы создать массив, нужно выбрать тип данных и в квадратных скобках указать размер массива.</p>
            <pre>
                <code data-lang="cpp">
                   int arr[5]; // Создали целочисленный массив с размером 5
                </code>
            </pre>
            <p>В данном массиве 5 элементов, но они все неинициализированы, поэтому при обращении к элементу мы получим "мусор". Однако мы можем выполнить инициализацию и присвоить этим числам некоторые начальные значения через фигурные скобки</p>
            <pre>
                <code data-lang="cpp">
                   int arr[5] = {1,2,3,4,5};
                </code>
            </pre>
            <p>Если мы попробуем положить элементов в массив больше его размера, то будет ошибка.</p>
            <p>Также нам необязательно вводить размер массива, если мы его инициализировали.</p>
            <pre>
                <code data-lang="cpp">
                   int arr[] = {1,2,3,4,5};
                </code>
            </pre>
            <p>Чтобы обратиться к элементу массива, нужно обратиться к его индексу. Индекс начинается с нуля.</p>
            <img src="images/массив.png" alt="" class = "img">
            <pre>
                <code data-lang="cpp">
                   int arr[5] = {1,2,3,4,5};
                   cout<< arr[0]; // выведится 1
                   arr[0] = 5; // меняем элемент
                   cout<< arr[0]; // выведится 5
                </code>
            </pre>
            <p>С ячейками массива также можно производить операции</p>
            <pre>
                <code data-lang="cpp">
                   int arr[5] = {1,2,3,4,5};
                   arr[4] += 5;
                   cout<< arr[4]; // выведится 10
                   arr[4] += arr[1] // выведится 11
                </code>
            </pre>
            <p>Не допускается присвоение одному массиву другого массива:</p>
            <pre>
                <code data-lang="cpp">
                   int arr[5] = {1,2,3,4,5};
                   int nums[5] = arr[5]; // ошибка
                </code>
            </pre>
            <h1>Перебор массива</h1>
            <p>Чтобы пробежаться по массиву, нужно использовать циклы.</p>
            <pre>
                <code data-lang="cpp">
                   int n = 5;
                   int arr[n] = {1,2,3,4,5};
                   for(int i = 0;i < n;i++)
                   {
                        cout<< arr[i] << endl;
                   }
                   // Таким образом выведится в столбец элементы массива
                </code>
            </pre>
            <p>Также есть другая конструкция <bold>for</bold> для вывода массива.</p>
        <pre>
            <code data-lang="cpp">
                for(тип переменная : название массива)
                {
                    // Тело цикла
                }
             </code>
         </pre>
         <p>Таким образом перепишем наш прошлый <bold>for</bold>.</p>
         <pre>
            <code data-lang="cpp">
               int n = 5;
               int arr[n] = {1,2,3,4,5};
               for(int num : arr)
               {
                    cout<< num << endl;
               }
               // Таким образом выведится в столбец элементы массива
            </code>
        </pre>
        <p>Инициализация массива с помощью цикла и <bold>cin</bold>:</p>
        <pre>
            <code data-lang="cpp">
              int n = 5;
              int arr[n];
              for(int i = 0;i < n;i++)
              {
                  cin >> arr[i];
              }
            </code>
        </pre>
        <h1>Двумерные массивы</h1>
        <p>Кроме одномерных массивов в C++ есть многомерные. Элементы таких массивов сами в свою очередь являются массивами, в которых также элементы могут быть массивами. Например, рассмотрим двумерный массив:</p>
        <img src="images/двумерный массив.png" alt="" class = "img">
        <pre>
            <code data-lang="cpp">
               int arr[3][2] =  { {1, 2}, {4, 5}, {7, 8} };
            </code>
        </pre> 
        <p>Чтобы обратиться к элементам вложенного массива, потребуется два индекса:</p>
        <img src="images/ячейки массива.png" alt="" class = "img"> 
        <pre>
            <code data-lang="cpp">
               int arr[3][2] =  { {1, 2}, {4, 5}, {7, 8} };
               cout<< arr[1][1];// выведится 5
            </code>
        </pre>
        <p>Чтобы перебрать двумерный массив, нужны вложенные циклы.</p>
        <pre>
            <code data-lang="cpp">
              int n = 5, m = 3;
              int arr[n][m];
              for(int i = 0;i < n;i++)
              {
                  for(int j = 0;j < m;j++)
                  {
                      cin >> arr[i][j];
                  }
              }
              // Инициализация с помощью cin
              for(int i = 0;i < n;i++)
              {
                  for(int j = 0;j < m;j++)
                  {
                      cout << arr[i][j] << " "; 
                  }
                  cout << endl;
              }
              // Вывод элементов в виде таблицы
            </code>
        </pre>

    </section>
    </div>
    <script src="../подсветка/highlight.min.js"></script>
    <script>hljs.highlightAll();</script>
</body>
</html>
